name: Android Build & Distribute

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  # Job 1: Run Lint checks
  lint:
    name: üßπ Lint
    runs-on: ubuntu-latest
    outputs: # Define outputs if other jobs need to know lint status (optional)
      lint-status: ${{ job.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.0

      - name: Set up JDK 17
        uses: actions/setup-java@v3.13.0
        with:
          distribution: "adopt"
          java-version: 17

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Cache Gradle
        uses: actions/cache@v4 # Use v4 for latest features/fixes
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Run Lint
        run: ./gradlew lint

      - name: Upload Lint Results (Optional)
        if: always() # Upload even if lint fails to see the report
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: app/build/reports/lint-results-debug.html

  # Job 2: Run Unit Tests (depends on Lint completing successfully)
  test:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    if: needs.lint.outputs.lint-status == 'success' || github.event_name == 'push' # Run tests if lint passed OR if it's a push to main (to always try)
    outputs:
      test-status: ${{ job.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.0

      - name: Set up JDK 17
        uses: actions/setup-java@v3.13.0
        with:
          distribution: "adopt"
          java-version: "17"

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Run Unit Tests
        run: ./gradlew test

      - name: Upload Test Results (Optional)
        if: always() # Upload even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: app/build/reports/tests/testDebugUnitTest

  # Job 3: Build APK (depends on Tests completing successfully)
  build-apk:
    name: üèóÔ∏è Build Debug APK
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.outputs.test-status == 'success' || github.event_name == 'push' # Run build if tests passed OR if it's a push to main
    outputs:
      apk-path: app/build/outputs/apk/debug/app-debug.apk
      apk-name: app-debug.apk
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.0

      - name: Set up JDK 17
        uses: actions/setup-java@v3.13.0
        with:
          distribution: "adopt"
          java-version: "17"

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Build Debug APK
        run: ./gradlew :app:assembleDebug

      # Upload the APK as an artifact so the 'distribute' job can access it
      - name: Upload Debug APK for Distribution
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk-for-distribution # Unique name for this artifact
          path: app/build/outputs/apk/debug/app-debug.apk

  # Job 4: Distribute APK to Firebase (depends on APK build completing successfully)
  distribute-apk:
    name: üöÄ Distribute to Firebase
    runs-on: ubuntu-latest
    needs: build-apk
    # Only run distribution for pushes to main, or if specifically triggered (add other conditions if needed)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.build-apk.outputs.apk-path != ''

    steps:
      # No need to checkout code here if the APK is the only thing needed

      - name: Set up JDK 17 (may not be strictly needed if not running gradle, but good practice)
        uses: actions/setup-java@v3.13.0
        with:
          distribution: "adopt"
          java-version: "17"

      # Download the APK artifact built in the 'build-apk' job
      - name: Download Debug APK for Distribution
        uses: actions/download-artifact@v4
        with:
          name: app-debug-apk-for-distribution
          path: build/apk/ # Download it to a specific path

      - name: Distribute to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1.7.0 # Use a specific version
        with:
          appId: ${{secrets.FIREBASE_APP_ID}}
          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
          groups: testers
          file: build/apk/app-debug.apk # Path to the downloaded APK
          # Optional: Add release notes
          # releaseNotes: "Build ${{ github.run_number }} - ${{ github.sha }}"